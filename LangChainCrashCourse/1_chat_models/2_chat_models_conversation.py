from langchain_core.messages import SystemMessage, HumanMessage, AIMessage
from langchain_openai import ChatOpenAI
from dotenv import load_dotenv

load_dotenv()

llm = ChatOpenAI(model="gpt-3.5-turbo")

messages = [
    SystemMessage("You are an expert in social media content strategy"),
    HumanMessage("Give a short tip to create engaging posts on Instagram"),
]

result = llm.invoke(messages)

print(result.content)
"""
One tip to create engaging posts on Instagram is to use high-quality visuals that grab the viewer's attention. This can include bright colors,clean compositions, and interesting textures to make your posts visually appealing and attractive to your audience.
"""

"""
Example of a complete conversation flow:
messages = [
    SystemMessage("You are an expert in social media content strategy"),
    HumanMessage("Give a short tip to create engaging posts on Instagram"),
    AIMessage(content="One tip to create engaging posts on Instagram is to use high-quality visuals that grab the viewer's attention. This can include bright colors, clean compositions, and interesting textures to make your posts visually appealing and attractive to your audience."),
    HumanMessage("Can you give me another tip focusing on captions?")
]
"""

"""
No, SystemMessage and AIMessage serve different purposes in LangChain:

- `SystemMessage`: Sets up initial instructions or context for the AI model. It's like giving the AI its "role" or "personality" before the conversation starts. In your code, it tells the AI to act as a social media expert.

- `AIMessage`: Represents responses generated by the AI during the conversation. These messages are typically added to the conversation history after the AI responds.

The conversation flow generally works like this:
1. `SystemMessage`: Initial setup/role (optional)
2. `HumanMessage`: User's input/question
3. `AIMessage`: AI's response (automatically generated after `llm.invoke()`)


Your code shows the proper setup with a `SystemMessage` defining the AI's role as a social media expert, followed by a `HumanMessage` containing the user's question.
"""
